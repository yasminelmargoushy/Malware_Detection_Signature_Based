import re
import hashlib
import os
import json
import signal


class Detector:
    def __init__(self):
        self.MalwareDatabasePath = "Malware_Database.json"
        self.PIDsFilePath = "PIDs.txt"
        self.__ReadMalwareDatabase()

    def CheckRunningProcesses(self):
        # READ NAMES OF FOLDERS IN /proc & PUT THE RESULT IN PIDs.txt#
        command = f"ls /proc > {self.PIDsFilePath}"
        os.system(command)

        # OPEN THE PIDs.txt TO LOOP ON THE PIDs # 
        PIDFile = open(f"{self.PIDsFilePath}", "r")

        # START LOOP #
        while True:
            # READ LINE FROM PIDs.txt #
            PID = PIDFile.readline()

            # IF END OF FILE BREAK #
            if not PID:
                break
            
            # REMOVE THE LAST CHARACHTER "\n" #
            PID = PID[ : -1 ] 

            # CHECK TO SEE IF IT'S A PID [NUMERIC] #
            if PID.isnumeric():
                try:
                    with open(f"/proc/{PID}/maps", "r") as maps_file:
                        with open(f"/proc/{PID}/mem", "rb") as mem_file:
                            # READ FIRST LINE #
                            First_Line = maps_file.readline()

                            # GET LOCATION OF THE LAST SPACE #
                            Last_space_Pos_1 = First_Line.rfind(" ")

                            # GET THE PROGRAM PATH #
                            Program_Path_1 = First_Line[Last_space_Pos_1 + 1 : ]
        
                            m1 = re.match(r"([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w])", First_Line)

                            # GET LOCATION OF FIRST SPACE #
                            First_space_Pos_1 = First_Line.find(" ")

                            # GET PERMISIIONS #
                            Permissions_1 = First_Line[First_space_Pos_1 + 1 : First_space_Pos_1+5]

                            # CHECK IF IT'S HAS EXECUTE PERMISSION #
                            if Permissions_1 == "r-xp" or Permissions_1 == "rwxp":

                                # GET START & END ADRESSES OF TEXT SECTION #
                                start = int(m1.group(1), 16)
                                end = int(m1.group(2), 16)

                                # READ TEXT SECTION FROM MEMORY #
                                mem_file.seek(start)
                                chunk = mem_file.read(end - start)

                                # FIND HASH OF TEXT SECTION #
                                readable_hash = hashlib.sha256(chunk).hexdigest()

                                # CHECK HASH #
                                self.__CheckHash(PID,  Program_Path_1 [ : -1], readable_hash)

                            else:
                                for line in maps_file.readlines():

                                    # GET LOCATION OF THE LAST SPACE #
                                    Last_space_Pos_2 = line.rfind(" ")

                                    # GET THE PROGRAM PATH #
                                    Program_Path_2 = line[Last_space_Pos_2 + 1 : ]

                                    m2 = re.match(r"([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w])", line)

                                    # GET LOCATION OF FIRST SPACE #
                                    First_space_Pos_2 = line.find(" ")

                                    # GET PERMISIIONS #
                                    Permissions_2 = line[First_space_Pos_2 + 1 : First_space_Pos_2 + 5]

                                    # CHECK IF IT'S HAS EXECUTE PERMISSION #
                                    if Permissions_2 == "r-xp" or Permissions_2 == "rwxp":

                                        # CHECK IF IT'S THE EXECUTABLE IS THE PROGRAM EXECUTABLE & NOT A LIBRARY #
                                        if Program_Path_2 == Program_Path_1:

                                            # GET START & END ADRESSES OF TEXT SECTION #
                                            start = int(m2.group(1), 16)
                                            if start > 0xFFFFFFFFFFFF:
                                                continue
                                            end = int(m2.group(2), 16)

                                            # READ TEXT SECTION FROM MEMORY #
                                            mem_file.seek(start)
                                            chunk = mem_file.read(end - start)

                                            # FIND HASH OF TEXT SECTION #
                                            readable_hash = hashlib.sha256(chunk).hexdigest()

                                            # CHECK HASH #
                                            self.__CheckHash(PID,  Program_Path_1 [ : -1], readable_hash)
                                            break

                            # CLOSE FILES #
                            mem_file.close()
                            maps_file.close()
                except IOError:
                    continue          

    def __ReadMalwareDatabase(self):
        fJsonMalDB = open(self.MalwareDatabasePath)
        self.MalwareDatabase = json.load(fJsonMalDB)

    def __CheckHash(self, PID, Path, Hash):
        try:
            Black_list = self.MalwareDatabase["Black_List"]
            for Malware in Black_list:
                if self.MalwareDatabase["Black_List"][Malware]["Hash"] == Hash:
                    print("Blacklisted Malware Detected")

                    # KILL PROCESS #
                    os.kill(int(PID),9)
                    print("Malware Process Killed")

                    # DELETE MALWARE #
                    MalwarePath = ""
                    FoldersList = Path.split("/")
                    #  REMOVE LAST TWO NAMES IN PATH #
                    FoldersList.pop()
                    FoldersList.pop()
                    for i in range(len(FoldersList)):
                        MalwarePath = MalwarePath + FoldersList[i] + "/"
                    command = f"rm -r {MalwarePath}*"
                    os.system(command)
                    print("Malware Deleted")

            Quarantine_List = self.MalwareDatabase["Quarantine_List"]
            for Malware in Quarantine_List:
                if self.MalwareDatabase["Quarantine_List"][Malware]["Hash"] == Hash:
                    print("New Malware {Malware} is Detected")
                    print("To block Malware Press 1")
                    print("To Ignore Malware press 2")
                    print("To decide Later PressAny Character")
                    UserInput = int(input("User Input: "))
                    if UserInput == 1:
                        # MOVE TO BLACK LIST #
                        MovMalware = self.MalwareDatabase["Quarantine_List"][Malware]
                        self.MalwareDatabase["Black_List"][Malware] = MovMalware

                        # DELETE FROM QUARANTINE LIST #
                        del self.MalwareDatabase["Quarantine_List"][Malware]

                        # WRITE TO JSON FILE
                        json_object = json.dumps(self.MalwareDatabase, indent = 4)
                        with open("Malware_Database.json", "w") as JsonDBFile:
                            JsonDBFile.write(json_object)

                        print("Moved to Blacklist")
                        self.__CheckHash(PID, Path, Hash)

                    elif UserInput == 2:
                        # MOVE TO WHITE LIST #
                        MovMalware = self.MalwareDatabase["Quarantine_List"][Malware]
                        self.MalwareDatabase["White_List"][Malware] = MovMalware

                        # DELETE FROM QUARANTINE LIST #
                        del self.MalwareDatabase["Quarantine_List"][Malware]

                        # WRITE TO JSON FILE
                        json_object = json.dumps(self.MalwareDatabase, indent = 4)
                        with open("Malware_Database.json", "w") as JsonDBFile:
                            JsonDBFile.write(json_object)

                        print("Moved to Whitelist")
                        self.__CheckHash(PID, Path, Hash)
                    else:
                        os.kill(int(PID),9)
                        print("Malware Process Killed")
            
            White_List = self.MalwareDatabase["White_List"]
            for Malware in White_List:
                if self.MalwareDatabase["White_List"][Malware]["Hash"] == Hash:
                    print("Whitelisted Malware Detected")
        except Exception as e:
            print(f"Exception Occured: {e}")
            return