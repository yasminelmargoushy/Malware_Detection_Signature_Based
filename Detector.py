import sys
import re
import hashlib
import subprocess
import sys,os

#f = os.popen("top -b  -n 1", "r")

#text = f.read()
#file=open("file2.txt","w")
#file.write(text)
#print (text)
hash ="8f1eb0991eee9a1e01934e058c49240cb07c100b7e970722bc66eeccfbda14a5"

if __name__ == "__main__":

    command = ""
    command = "ls /proc > file99.txt"
    os.system(command)
    PIDfile = open("file99.txt", "r")

    while True:
        pid= PIDfile.readline()
        if not pid:
            break
        pid= pid[:-1] 
        if pid.isnumeric():
            count = 0
            # Strips the newline character
        
            count += 1
            #pid=Line.strip()
            #pid = int(sys.argv[1])
            output_file = open("self.dump3", 'wb')
            with open(f"/proc/{pid}/maps", "r") as maps_file:
                with open(f"/proc/{pid}/mem", "rb") as mem_file:
                    first_line=maps_file.readline()
                    i1=first_line.rfind(" ")
                    s1=first_line[i1+1:]
                    m1 = re.match(r"([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w])", first_line)
                    j1=first_line.find(" ")
                    t1=first_line[j1+1:j1+5]
                    if t1 == "r-xp" or t1 == "rwxp":
                        start = int(m1.group(1), 16)
                        end = int(m1.group(2), 16)
                        mem_file.seek(start)
                        chunk = mem_file.read(end - start)
                        readable_hash = hashlib.sha256(chunk).hexdigest();
                        print (readable_hash)
                    for line in maps_file.readlines():
                        i2=line.rfind(" ")
                        s2=line[i2+1:]
                        m = re.match(r"([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w])", line)
                        j2=line.find(" ")
                        t2=line[j2+1:j2+5]
                        if t2 == "r-xp" or t2 == "rwxp":
                            if s2==s1:
                                start = int(m.group(1), 16)
                                if start > 0xFFFFFFFFFFFF:
                                    continue
                                end = int(m.group(2), 16)
                                mem_file.seek(start)
                                chunk = mem_file.read(end - start)
                                readable_hash = hashlib.sha256(chunk).hexdigest();
                    print(pid)
                    print (readable_hash)
                    if readable_hash==hash:
                       os.kill(int(pid),9)
                       x=9
                       print(x)




