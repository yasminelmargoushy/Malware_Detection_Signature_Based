import re
import hashlib
import os,time
import json

if __name__ == "__main__":
    Filename = input("Enter Executable Name: ")

    try:
        Pid = os.fork()
        if Pid == 0:

            # RUN MALWARE EXECUTABLE # 
            command = f"./{Filename}"
            os.system(command)
        
        elif Pid > 0:

            time.sleep(1)

            # GET PID #
            command = f"pidof ./{Filename} > MalwarePID.txt"
            os.system(command)

            # OPEN THE MalwarePID.txt TO GET the PID # 
            MalwarePIDFile = open("MalwarePID.txt", "r")

            PIDs = MalwarePIDFile.readline()

            PID = PIDs.split(" ")[0]

            with open(f"/proc/{PID}/maps", "r") as maps_file:
                with open(f"/proc/{PID}/mem", "rb") as mem_file:
                    # READ FIRST LINE #
                    First_Line = maps_file.readline()

                    # GET LOCATION OF THE LAST SPACE #
                    Last_space_Pos_1 = First_Line.rfind(" ")

                    # GET THE PROGRAM PATH #
                    Program_Path_1 = First_Line[Last_space_Pos_1 + 1 : ]

                    m1 = re.match(r"([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w])", First_Line)

                    # GET LOCATION OF FIRST SPACE #
                    First_space_Pos_1 = First_Line.find(" ")

                    # GET PERMISIIONS #
                    Permissions_1 = First_Line[First_space_Pos_1 + 1 : First_space_Pos_1+5]

                    # CHECK IF IT'S HAS EXECUTE PERMISSION #
                    if Permissions_1 == "r-xp" or Permissions_1 == "rwxp":

                        # GET START & END ADRESSES OF TEXT SECTION #
                        start = int(m1.group(1), 16)
                        end = int(m1.group(2), 16)

                        # READ TEXT SECTION FROM MEMORY #
                        mem_file.seek(start)
                        chunk = mem_file.read(end - start)

                        # FIND HASH OF TEXT SECTION #
                        readable_hash = hashlib.sha256(chunk).hexdigest()

                        # CHECK HASH #
                        print (readable_hash)

                    else:
                        for line in maps_file.readlines():

                            # GET LOCATION OF THE LAST SPACE #
                            Last_space_Pos_2 = line.rfind(" ")

                            # GET THE PROGRAM PATH #
                            Program_Path_2 = line[Last_space_Pos_2 + 1 : ]

                            m2 = re.match(r"([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w])", line)

                            # GET LOCATION OF FIRST SPACE #
                            First_space_Pos_2 = line.find(" ")

                            # GET PERMISIIONS #
                            Permissions_2 = line[First_space_Pos_2 + 1 : First_space_Pos_2 + 5]

                            # CHECK IF IT'S HAS EXECUTE PERMISSION #
                            if Permissions_2 == "r-xp" or Permissions_2 == "rwxp":

                                # CHECK IF IT'S THE EXECUTABLE IS THE PROGRAM EXECUTABLE & NOT A LIBRARY #
                                if Program_Path_2 == Program_Path_1:

                                    # GET START & END ADRESSES OF TEXT SECTION #
                                    start = int(m2.group(1), 16)
                                    if start > 0xFFFFFFFFFFFF:
                                        continue
                                    end = int(m2.group(2), 16)

                                    # READ TEXT SECTION FROM MEMORY #
                                    mem_file.seek(start)
                                    chunk = mem_file.read(end - start)

                                    # FIND HASH OF TEXT SECTION #
                                    readable_hash = hashlib.sha256(chunk).hexdigest()

                                    # CHECK HASH #
                                    print (readable_hash)
                                    break

                    # CLOSE FILES #
                    mem_file.close()
                maps_file.close()

            # KILL PROCESS #
            os.kill(int(PID),9)
            print("Malware Process Killed")

            # READ JSON FILE #
            fJsonMalDB = open("Malware_Database.json")
            MalwareDatabase = json.load(fJsonMalDB)

            Name = Filename.split("/") [-1]

            # Push Malware into Quarentine List #
            Hash = {"Hash" : readable_hash}
            CheckFunction = {"CheckFunction" : "0"}

            MalwareDatabase["Quarantine_List"][Name] = [Hash, CheckFunction] 

            # WRITE TO JSON FILE #
            json_object = json.dumps(MalwareDatabase, indent = 4)
            with open("Malware_Database.json", "w") as JsonDBFile:
                JsonDBFile.write(json_object)
             

    except Exception as e:
        print(f"Exception: {e}")
    
